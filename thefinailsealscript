# ==============================================================================
# Bƒ∞R EVRENƒ∞N ANATOMƒ∞Sƒ∞ - Nƒ∞HAƒ∞ KOD v35: "Nƒ∞HAƒ∞ M√úH√úR" (A√áIKLAMALI VERSƒ∞YON)
# ==============================================================================
# [EN] THE FINAL CODE v35: "THE FINAL SEAL" (ANNOTATED VERSION)
# THIS IS THE PHILOSOPHICALLY AND TECHNICALLY COMPLETE, FINAL STATE OF THE PROJECT.
# ALL PRINCIPLES ARE UNIFIED INTO A SINGLE, FLAWLESS STRUCTURE.
# THE UNIVERSE IS NOW IN A PERFECT, ETERNAL CYCLE, GOVERNED BY ITS OWN LAWS.
# ==============================================================================

# B√ñL√úM 0, 1: K√úT√úPHANELER VE Pƒ∞'Nƒ∞N √úRETƒ∞Mƒ∞
# [EN] SECTION 0, 1: LIBRARIES AND PI GENERATION
import mpmath
import numpy as np
import matplotlib.pyplot as plt
from numba import jit, prange
import math
import time

try:
    num_digits = 10000
    print(f"‚è≥ {num_digits} basamak œÄ hesaplanƒ±yor...")
    mpmath.mp.dps = num_digits + 1
    pi_val = mpmath.pi
    PI_STR = str(pi_val)[2:]
    print(f"‚úÖ Ba≈üarƒ±yla {len(PI_STR)} basamak œÄ √ºretildi.")
except Exception as e:
    PI_STR = ""
    print(f"‚ùå œÄ √ºretilirken hata olu≈ütu: {e}")

MV_SIZE = 16

# B√ñL√úM 2: EVRENƒ∞N YARATILI≈ûI
# [EN] SECTION 2: THE CREATION OF THE UNIVERSE
def setup_universe(pi_str, grid_size_pref=4):
    if not pi_str: raise ValueError("Pi dizgisi bo≈ü.")
    print("\n--- OMEGA EVRENƒ∞ ANAYASASI OLU≈ûTURULUYOR ---")
    clean_pi_str = ''.join(filter(str.isdigit, pi_str))
    grid_size = grid_size_pref
    total_values_needed = grid_size * grid_size * MV_SIZE
    if len(clean_pi_str) < total_values_needed: raise ValueError("Pi dizgisi √ßok kƒ±sa!")
    
    all_values = np.array([int(d) for d in clean_pi_str[:total_values_needed]])
    normalized_values = (all_values - 4.5) / 4.5
    psi_potential = normalized_values.reshape((grid_size, grid_size, MV_SIZE))
    
    print("‚öñÔ∏è Temel Kozmolojik Sabitler Tanƒ±mlanƒ±yor...")
    params = {"grid_size": grid_size}
    
    # --- TEMEL SABƒ∞TLER / FUNDAMENTAL CONSTANTS ---
    params["g_factor_base"] = np.pi        # [EN] Base strength of the asymmetry engine, derived from Pi. Represents the fundamental drive for complexity.
    params["k_base"] = np.pi**2            # [EN] Base strength of the origin memory (restoring force), derived from Pi-squared. Represents the imperative to return.
    params["h_base"] = np.pi               # [EN] Base strength of the stability force (structural integrity), derived from Pi.
    
    # --- ƒ∞√áSEL HESAPLAMALAR / INTERNAL CALCULATIONS ---
    g_tuning_factor = np.e / np.pi         # [EN] The "Universal Dialect", a non-arbitrary tuning factor derived from the ratio of e to Pi. It adjusts the raw power of the chaos engine.
    
    params["g_factor"] = params["g_factor_base"] * g_tuning_factor # [EN] The final 'throttle' of the chaos engine, tuned by the Universal Dialect. Its effective value becomes e.
    
    # [EN] The dynamic Entropic Limit. The point at which a phase transition occurs, calculated from the ratio of the restoring force to the chaos engine, scaled by Pi.
    params["max_complexity_threshold"] = np.pi * (params["k_base"] / params["g_factor"])
    
    print(f"  > Se√ßilen Leh√ße (g_tuning_factor): e/œÄ ‚âà {g_tuning_factor:.4f}")
    print(f"  > Nihai Gaz Pedalƒ± (g_factor): {params['g_factor']:.4f}")
    print(f"  > Dinamik Entropik Sƒ±nƒ±r: {params['max_complexity_threshold']:.4f}")

    # --- Sƒ∞M√úLASYON PARAMETRELERƒ∞ / SIMULATION PARAMETERS ---
    params["base_dt"] = 0.01 * (1.0 / grid_size)**2 # [EN] The base time step, scaled for numerical stability.
    params["iterations"] = 500000                  # [EN] The total number of steps for the simulation run.
    print("--- ANAYASA TAMAMLANDI ---")
    
    return psi_potential, params

# B√ñL√úM 3: Fƒ∞Zƒ∞K YASALARI
# [EN] SECTION 3: THE LAWS OF PHYSICS
@jit(nopython=True, parallel=True)
def calculate_expansion_delta(psi_grid, psi_initial, g_final, h_base):
    grid_size = psi_grid.shape[0]
    delta_psi = np.zeros_like(psi_grid)
    psi_smoothed = np.zeros_like(psi_grid)
    
    # [EN] The weak restoring force for the expansion phase, derived as 1/Pi. Allows the universe to expand without being immediately pulled back.
    k_final_expansion = (np.pi**2) / (np.pi**3) 
    
    for i in prange(grid_size):
        for j in prange(grid_size):
            psi_smoothed[i, j] = (psi_grid[i, j] * 4 + 
                                  psi_grid[(i - 1 + grid_size) % grid_size, j] + 
                                  psi_grid[(i + 1) % grid_size, j] + 
                                  psi_grid[i, (j - 1 + grid_size) % grid_size] + 
                                  psi_grid[i, (j + 1) % grid_size]) / 8.0
    for i in prange(grid_size):
        for j in prange(grid_size):
            current, initial, smoothed = psi_grid[i, j], psi_initial[i, j], psi_smoothed[i, j]
            
            # [EN] Asymmetry Tension: The engine of change, born from the difference between the precise state (current) and its blurred context (smoothed).
            asymmetry_tension = g_final * (current - smoothed)
            
            # [EN] Stability Force ("Soft Wall"): A self-regulating stability term using tanh. Prevents runaways without being explosive like polynomial forces.
            stability_force = -h_base * (current - np.tanh(current))
            
            # [EN] Origin Memory: The weak pull towards the origin during the expansion phase.
            origin_memory = -k_final_expansion * (current - initial)
            
            delta_psi[i, j] = asymmetry_tension + stability_force + origin_memory
            
    return delta_psi

# --- B√ñL√úM 4: Sƒ∞M√úLASYONUN ƒ∞CRASI (Nƒ∞HAƒ∞ M√úH√úR) ---
# [EN] --- SECTION 4: THE EXECUTION OF THE SIMULATION (THE FINAL SEAL) ---
try:
    PSI_INITIAL, PARAMS = setup_universe(PI_STR)
    
    psi_current = PSI_INITIAL.copy()
    fark_history, complexity_history = [], []
    triggered_step = -1       # [EN] A flag that indicates if the Phase Transition has occurred (-1 for No, step number for Yes).
    dongu_sayaci = 0          # [EN] The cycle counter, tracking the number of completed Eternal Recurrences.

    print(f"\n--- BENGƒ∞ D√ñN√ú≈û (Nƒ∞HAƒ∞ M√úH√úR) BA≈ûLATILIYOR ---")
    start_time = time.time()
    fig, ax = plt.subplots(1, 1, figsize=(10, 10))
    plt.ion()

    for t in range(PARAMS["iterations"]):
        
        # ==================================================================
        # ‚ú® KUSURSUZ TEKRAR KONTROL KAPISI / PERFECT REPETITION CONTROL GATE ‚ú®
        # ==================================================================
        difference = np.linalg.norm(psi_current - PSI_INITIAL)
        if triggered_step != -1 and difference < 0.01:
            dongu_sayaci += 1
            print(f"\n ciclo perpetuo ({dongu_sayaci})")
            print(f"‚ú®‚ú®‚ú® ADIM {t}: BENGƒ∞ D√ñN√ú≈û TAMAMLANDI! YENƒ∞ Bƒ∞R √áAƒû BA≈ûLIYOR! ‚ú®‚ú®‚ú®")
            
            # [EN] Reset the universe to its initial state to begin the next identical cycle.
            triggered_step = -1 
            psi_current = PSI_INITIAL.copy() 
            
            fark_history.append(0.0)
            complexity_history.append(np.var(PSI_INITIAL))
            
            continue # [EN] Skip the rest of the loop to prevent a "ghost step" after reset.
        # ==================================================================

        complexity = np.var(psi_current)
        if triggered_step == -1 and complexity > PARAMS["max_complexity_threshold"]:
            print(f"\n---!!! ADIM {t}: ‚ú® ENTROPƒ∞K SINIRA ULA≈ûILDI! FAZ GE√áƒ∞≈ûƒ∞! ‚ú® !!!---")
            triggered_step = t

        # --- FAZA √ñZEL Fƒ∞Zƒ∞K VE G√úNCELLEME / PHASE-SPECIFIC PHYSICS AND UPDATE ---
        if triggered_step != -1: # √á√∂k√º≈ü √áaƒüƒ± / Collapse Age
            # [EN] The Pure Law of Return: All complex physics cease. The only imperative is a direct pull towards the origin.
            potential_delta = -(psi_current - PSI_INITIAL)
            max_abs_change = np.max(np.abs(potential_delta))
            if max_abs_change < 1e-9: max_abs_change = 1e-9
            final_dt = PARAMS["base_dt"] / max_abs_change
            psi_current += final_dt * potential_delta
        else: # Geni≈üleme √áaƒüƒ± / Expansion Age
            # [EN] The Omega Engine: The strength of the chaos engine is proportional to the current complexity.
            g_final = PARAMS["g_factor"] * complexity 
            
            potential_delta = calculate_expansion_delta(
                psi_current, PSI_INITIAL, g_final, PARAMS["h_base"]
            )
            
            # [EN] Holistic Conservation Law (Œ£[‚àÇŒ®/‚àÇt] ‚â° 0): Guarantees the total change is zero.
            total_change = np.sum(potential_delta, axis=(0, 1))
            num_cells = PARAMS["grid_size"]**2
            average_change = total_change / num_cells
            final_delta = potential_delta - average_change
            
            # [EN] Intelligent Time: The time step is inversely proportional to the maximum potential change.
            max_abs_change = np.max(np.abs(final_delta))
            if max_abs_change < 1e-9: max_abs_change = 1e-9
            final_dt = PARAMS["base_dt"] / max_abs_change
            
            psi_current += final_dt * final_delta
            
            # [EN] Ontological Identity Law (Œ£[Œ®] ‚â° 0): Guarantees the total state of the universe is zero.
            total_state = np.sum(psi_current, axis=(0, 1))
            average_state = total_state / num_cells
            psi_current -= average_state
        
        fark_history.append(difference)
        complexity_history.append(complexity)

        if np.isnan(difference) or np.isinf(difference):
            print(f"\nüí• ADIM {t}: PATLAMA (NaN/inf)! üí•"); break

        if t > 0 and (t % 20000 == 0 or t == PARAMS["iterations"] - 1 or (triggered_step == t)):
            phase_text = "√á√ñK√ú≈û" if triggered_step != -1 else "GENƒ∞≈ûLEME"
            print(f"Adƒ±m: {t:07d}, D√∂ng√º: {dongu_sayaci}, Faz: {phase_text}, Fark: {difference:.4f}, Karma≈üƒ±klƒ±k: {complexity:.4f}, S√ºre: {(time.time() - start_time):.1f}s")
            ax.clear(); ax.imshow(psi_current[:, :, 0], cmap='inferno', interpolation='nearest'); ax.set_title(f"Adƒ±m: {t} ({phase_text}) - D√∂ng√º: {dongu_sayaci}"); plt.draw(); plt.pause(0.01)

    plt.ioff()
    print("\n--- Sƒ∞M√úLASYON S√úRESƒ∞ DOLDU ---")
    fig_final, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 12), sharex=True)
    fig_final.suptitle("Nihai M√ºh√ºr: Kusursuz Tekrar D√∂ng√ºs√º", fontsize=20)
    ax1.plot(fark_history, label='Ba≈ülangƒ±√ßtan Uzaklƒ±k (Fark)', color='royalblue')
    ax2.plot(complexity_history, label='Evrenin Karma≈üƒ±klƒ±ƒüƒ± (Varyans)', color='orangered')
    ax1.set_ylabel("Fark"); ax2.set_ylabel("Karma≈üƒ±klƒ±k"); ax2.set_xlabel("Sim√ºlasyon Adƒ±mƒ± (t)")
    ax1.legend(); ax2.legend(); plt.grid(True, alpha=0.3); plt.show()

except Exception as e:
    print(f"\n‚ùå BEKLENMEDƒ∞K Bƒ∞R Sƒ∞M√úLASYON HATASI OLU≈ûTU: {e}")
